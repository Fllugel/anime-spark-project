from pyspark.sql import SparkSession
from pyspark.sql.types import StructType, StructField, IntegerType, StringType, DoubleType, ArrayType
from pyspark.sql.functions import col, count, when, isnull

def create_anime_schema():
    """
    –°—Ç–≤–æ—Ä—é—î —Å—Ö–µ–º—É –¥–ª—è –∞–Ω—ñ–º–µ –¥–∞—Ç–∞—Å–µ—Ç—É
    """
    return StructType([
        StructField("anime_id", IntegerType(), True),
        StructField("name", StringType(), True),
        StructField("genre", StringType(), True),  # –∞–±–æ ArrayType(StringType()) –¥–ª—è —Å–ø–∏—Å–∫—É –∂–∞–Ω—Ä—ñ–≤
        StructField("type", StringType(), True),
        StructField("episodes", IntegerType(), True),
        StructField("rating", DoubleType(), True),
        StructField("members", IntegerType(), True),
        StructField("synopsis", StringType(), True),
        StructField("studios", StringType(), True),
        StructField("source", StringType(), True),
        StructField("duration", StringType(), True),
        StructField("aired", StringType(), True),
        StructField("rank", DoubleType(), True),
        StructField("popularity", IntegerType(), True),
        StructField("favorites", IntegerType(), True),
        StructField("scored_by", IntegerType(), True),
        StructField("status", StringType(), True),
        StructField("premiered", StringType(), True),
        StructField("broadcast", StringType(), True),
        StructField("related", StringType(), True)
    ])

def create_anime_dataframe(spark: SparkSession, file_path: str):
    """
    –°—Ç–≤–æ—Ä—é—î DataFrame –¥–ª—è –∞–Ω—ñ–º–µ –¥–∞—Ç–∞—Å–µ—Ç—É –∑ –∑–∞–¥–∞–Ω–æ—é —Å—Ö–µ–º–æ—é

    Args:
        spark: SparkSession
        file_path: –®–ª—è—Ö –¥–æ CSV —Ñ–∞–π–ª—É

    Returns:
        DataFrame –∑ –∞–Ω—ñ–º–µ –¥–∞–Ω–∏–º–∏
    """
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ö–µ–º—É
    schema = create_anime_schema()

    # –ó—á–∏—Ç—É—î–º–æ CSV —Ñ–∞–π–ª –∑ —ñ–Ω—Ñ–µ—Ä–µ–Ω—Ü—ñ—î—é —Å—Ö–µ–º–∏ –∞–±–æ –∑ –∑–∞–¥–∞–Ω–æ—é —Å—Ö–µ–º–æ—é
    try:
        # –°–ø–æ—á–∞—Ç–∫—É —Å–ø—Ä–æ–±—É—î–º–æ –∑ —ñ–Ω—Ñ–µ—Ä–µ–Ω—Ü—ñ—î—é —Å—Ö–µ–º–∏
        df = spark.read.csv(file_path, header=True, inferSchema=True)
        print(f"‚úÖ –§–∞–π–ª –∑—á–∏—Ç–∞–Ω–æ –∑ —ñ–Ω—Ñ–µ—Ä–µ–Ω—Ü—ñ—î—é —Å—Ö–µ–º–∏. –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–ª–æ–Ω–æ–∫: {len(df.columns)}")
        print(f"–ù–∞–∑–≤–∏ –∫–æ–ª–æ–Ω–æ–∫: {df.columns}")
        return df
    except Exception as e:
        print(f"‚ö†Ô∏è  –ü–æ–º–∏–ª–∫–∞ –∑ —ñ–Ω—Ñ–µ—Ä–µ–Ω—Ü—ñ—î—é —Å—Ö–µ–º–∏: {e}")
        print("üîÑ –°–ø—Ä–æ–±–∞ –∑—á–∏—Ç–∞—Ç–∏ –∑ –∑–∞–¥–∞–Ω–æ—é —Å—Ö–µ–º–æ—é...")

        # –Ø–∫—â–æ —ñ–Ω—Ñ–µ—Ä–µ–Ω—Ü—ñ—è –Ω–µ –ø—Ä–∞—Ü—é—î, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–∞–¥–∞–Ω—É —Å—Ö–µ–º—É
        df = spark.read.csv(file_path, header=True, schema=schema)
        print(f"‚úÖ –§–∞–π–ª –∑—á–∏—Ç–∞–Ω–æ –∑ –∑–∞–¥–∞–Ω–æ—é —Å—Ö–µ–º–æ—é. –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–ª–æ–Ω–æ–∫: {len(df.columns)}")
        return df

def validate_dataframe(df):
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –∫–æ—Ä–µ–∫—Ç–Ω–æ –∑—á–∏—Ç–∞–≤—Å—è DataFrame

    Args:
        df: DataFrame –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
    """
    print("\nüìä –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ DataFrame:")
    print(f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ä—è–¥–∫—ñ–≤: {df.count()}")
    print(f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–ª–æ–Ω–æ–∫: {len(df.columns)}")
    print(f"–ù–∞–∑–≤–∏ –∫–æ–ª–æ–Ω–æ–∫: {df.columns}")

    # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 5 —Ä—è–¥–∫—ñ–≤
    print("\nüîç –ü–µ—Ä—à—ñ 5 —Ä—è–¥–∫—ñ–≤:")
    df.show(5, truncate=True)

    # –ü–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–æ–ª–æ–Ω–∫–∞—Ö
    print("\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–ª–æ–Ω–∫–∞—Ö:")
    df.printSchema()

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞ null –∑–Ω–∞—á–µ–Ω–Ω—è –≤ –∫–ª—é—á–æ–≤–∏—Ö –∫–æ–ª–æ–Ω–∫–∞—Ö
    print("\nüîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ null –∑–Ω–∞—á–µ–Ω–Ω—è –≤ –∫–ª—é—á–æ–≤–∏—Ö –∫–æ–ª–æ–Ω–∫–∞—Ö:")
    key_columns = ['anime_id', 'name', 'rating']
    for col_name in key_columns:
        if col_name in df.columns:
            null_count = df.filter(isnull(col(col_name))).count()
            print(f"  –ö–æ–ª–æ–Ω–∫–∞ '{col_name}': {null_count} null –∑–Ω–∞—á–µ–Ω—å")

    # –ü–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —á–∏—Å–ª–æ–≤–∏–º –∫–æ–ª–æ–Ω–∫–∞–º
    print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —á–∏—Å–ª–æ–≤–∏–º –∫–æ–ª–æ–Ω–∫–∞–º:")
    numeric_columns = ['episodes', 'rating', 'members', 'popularity', 'favorites']
    for col_name in numeric_columns:
        if col_name in df.columns:
            try:
                df.select(col_name).describe().show()
            except:
                print(f"  –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏ '{col_name}'")

    print("\n‚úÖ –í–∞–ª—ñ–¥–∞—Ü—ñ—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

def get_dataframe_info(df):
    """
    –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ DataFrame

    Args:
        df: DataFrame

    Returns:
        Dict –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ DataFrame
    """
    return {
        'row_count': df.count(),
        'column_count': len(df.columns),
        'columns': df.columns,
        'schema': df.schema
    }
